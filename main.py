"""
MoniPersonal - Aplica√ß√£o Refatorada e Modularizada
Vers√£o inicial com as principais rotas separadas em m√≥dulos
"""
from fastapi import FastAPI, Request, Depends
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from datetime import datetime
import uvicorn

# Importar configura√ß√µes centralizadas
from app.core.config import APP_NAME, APP_VERSION

# Importar middleware
from app.middleware.rate_limiting import setup_rate_limiting

# Importar rotas
from app.routes.auth import router as auth_router
from app.routes.public import router as public_router
from app.routes.admin import router as admin_router
from app.routes.student import router as student_router

# Importar configura√ß√µes para debug
from app.core.config import app_logs
from app.middleware.auth import require_admin

# Importar database
from app.core.database import SessionLocal, engine, Base, get_db

# Importar models para inicializa√ß√£o
from app.models import Avaliacao, Aluno, Usuario

# Importar utilit√°rios
from app.utils.logging import info_log


# Criar aplica√ß√£o FastAPI
app = FastAPI(
    title=APP_NAME,
    version=APP_VERSION,
    description="Sistema de Monitoramento Pessoal - Vers√£o Modularizada"
)

# Configurar rate limiting
limiter = setup_rate_limiting(app)

# Configurar arquivos est√°ticos e templates
app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")


# ==================== INICIALIZA√á√ÉO DO BANCO ====================

def init_database():
    """Inicializa o banco de dados automaticamente"""
    try:
        # Criar todas as tabelas se n√£o existirem
        Base.metadata.create_all(bind=engine)
        info_log("‚úÖ Banco de dados inicializado automaticamente")
        return True
    except Exception as e:
        info_log(f"‚ùå Erro ao inicializar banco: {str(e)}")
        return False


# ==================== INCLUIR ROTAS ====================

# Aplicar rate limiting nas rotas
auth_router.dependencies = [Depends(limiter.limit("10/minute"))]
public_router.dependencies = [Depends(limiter.limit("60/minute"))]
admin_router.dependencies = [Depends(limiter.limit("15/minute"))]
student_router.dependencies = [Depends(limiter.limit("20/minute"))]

# Incluir rotas
app.include_router(auth_router, tags=["autentica√ß√£o"])
app.include_router(public_router, tags=["p√∫blico"])
app.include_router(admin_router, tags=["administra√ß√£o"])
app.include_router(student_router, tags=["alunos"])


# ==================== ROTA RAIZ ====================

@app.get("/", response_class=HTMLResponse)
async def root(request: Request):
    """Redireciona para a p√°gina de login"""
    return RedirectResponse(url="/login")


# ==================== HEALTH CHECK ====================

@app.get("/health")
async def health_check():
    """Health check endpoint para Cloud Run"""
    try:
        # Verificar se o banco est√° acess√≠vel
        with SessionLocal() as db:
            db.execute("SELECT 1")
        return {"status": "healthy", "timestamp": datetime.now().isoformat()}
    except Exception as e:
        return {"status": "unhealthy", "error": str(e)}


# ==================== DEBUG ROUTES ====================

@app.get("/debug/logs", response_class=HTMLResponse)
@require_admin()
async def debug_logs(request: Request, session_data=None, jwt_data=None):
    """P√°gina de logs do sistema para debug"""
    try:
        # Converter deque para lista e inverter para mostrar mais recentes primeiro
        logs_list = list(app_logs)
        logs_list.reverse()

        return templates.TemplateResponse(
            "admin_logs.html",
            {
                "request": request,
                "logs": logs_list,
                "total_logs": len(logs_list),
                "is_admin": True
            }
        )
    except Exception as e:
        return templates.TemplateResponse(
            "erro.html",
            {
                "request": request,
                "title": "Erro ao carregar logs",
                "message": f"Erro ao carregar logs do sistema: {str(e)}",
                "back_url": "/admin/dashboard"
            }
        )


# ==================== ROTAS LEGADAS (EM MIGRA√á√ÉO) ====================
# Estas rotas est√£o sendo gradualmente migradas para os m√≥dulos apropriados
# TODO: Migrar rotas restantes nas pr√≥ximas fases


# ==================== EVENTOS DE INICIALIZA√á√ÉO ====================

@app.on_event("startup")
async def startup_event():
    """Executa na inicializa√ß√£o da aplica√ß√£o"""
    info_log(f"üöÄ Iniciando {APP_NAME} v{APP_VERSION} - Vers√£o Modularizada")

    # Inicializar banco de dados
    if init_database():
        info_log("‚úÖ Sistema pronto para uso")
    else:
        info_log("‚ö†Ô∏è Sistema iniciado com problemas no banco de dados")


@app.on_event("shutdown")
async def shutdown_event():
    """Executa no encerramento da aplica√ß√£o"""
    info_log(f"üî¥ Encerrando {APP_NAME}")


# ==================== EXECU√á√ÉO ====================

if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        workers=1
    )