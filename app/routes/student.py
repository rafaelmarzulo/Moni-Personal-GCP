"""
Rotas para alunos (formul√°rio, hist√≥rico, etc.)
"""
from fastapi import APIRouter, Request, Form, Depends, HTTPException
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.templating import Jinja2Templates
from sqlalchemy.orm import Session
from datetime import datetime, date
import structlog

from app.core.database import get_db
from app.models import Aluno, Avaliacao
from app.middleware.auth import require_auth
from app.services.auth_service import verify_simple_jwt
from app.core.config import SESSION_COOKIE_NAME
from app.utils.logging import info_log, debug_log, error_log
from app.utils.datetime_utils import now_sao_paulo, utc_to_sao_paulo

# Configurar router
router = APIRouter(tags=["student"])

# Configurar templates
templates = Jinja2Templates(directory="templates")

# Logger
logger = structlog.get_logger()


@router.get("/meu-historico", response_class=HTMLResponse)
@require_auth(['aluno'])
async def meu_historico(
    request: Request,
    db: Session = Depends(get_db),
    session_data=None,
    jwt_data=None
):
    """Hist√≥rico pessoal do aluno logado"""
    try:
        # Obter ID do aluno logado
        aluno_id = None
        if jwt_data:
            aluno_id = jwt_data.get("user_id")
        elif session_data:
            aluno_id = session_data.get("user_id")

        if not aluno_id:
            debug_log("‚ùå HISTORICO: ID do aluno n√£o encontrado")
            return RedirectResponse(url="/login")

        # Buscar aluno
        aluno = db.query(Aluno).filter(Aluno.id == aluno_id).first()
        if not aluno:
            debug_log(f"‚ùå HISTORICO: Aluno ID {aluno_id} n√£o encontrado")
            return RedirectResponse(url="/login")

        # Buscar avalia√ß√µes do aluno
        avaliacoes = db.query(Avaliacao).filter(
            Avaliacao.aluno_id == aluno_id
        ).order_by(Avaliacao.data.desc()).all()

        # Temporariamente removendo data_local para debug
        # for avaliacao in avaliacoes:
        #     if avaliacao.data:
        #         avaliacao.data_local = utc_to_sao_paulo(avaliacao.data)

        try:
            info_log(f"üìä HISTORICO: {len(avaliacoes)} avalia√ß√µes para {aluno.nome}")
        except Exception as log_error:
            print(f"Erro no log: {log_error}")  # Log simples para debug

        return templates.TemplateResponse(
            "meu_historico.html",
            {
                "request": request,
                "aluno": aluno,
                "avaliacoes": avaliacoes,
                "total_avaliacoes": len(avaliacoes),
                "is_admin": False
            }
        )

    except Exception as e:
        error_log(f"‚ùå HISTORICO: Erro: {str(e)}")
        return templates.TemplateResponse(
            "erro.html",
            {
                "request": request,
                "titulo": "Erro no Hist√≥rico",
                "mensagem": "Erro ao carregar seu hist√≥rico. Tente novamente.",
                "detalhes": str(e)
            }
        )


@router.get("/formulario", response_class=HTMLResponse)
@require_auth(['aluno'])
async def formulario_page(
    request: Request,
    db: Session = Depends(get_db),
    session_data=None,
    jwt_data=None
):
    """P√°gina do formul√°rio de avalia√ß√£o"""
    try:
        # Obter ID do aluno logado
        aluno_id = None
        if jwt_data:
            aluno_id = jwt_data.get("user_id")
        elif session_data:
            aluno_id = session_data.get("user_id")

        if not aluno_id:
            return RedirectResponse(url="/login")

        # Buscar dados completos do aluno
        aluno = db.query(Aluno).filter(Aluno.id == aluno_id).first()
        if not aluno:
            return RedirectResponse(url="/login")

        debug_log(f"üìù FORMULARIO: P√°gina acessada por {aluno.nome}")

        return templates.TemplateResponse(
            "formulario.html",
            {
                "request": request,
                "aluno": aluno,
                "aluno_nome": aluno.nome,
                "aluno_email": aluno.email,
                "data_atual": now_sao_paulo().strftime("%Y-%m-%d"),
                "is_admin": False
            }
        )

    except Exception as e:
        error_log(f"‚ùå FORMULARIO: Erro: {str(e)}")
        return templates.TemplateResponse(
            "erro.html",
            {
                "request": request,
                "titulo": "Erro no Formul√°rio",
                "mensagem": "Erro ao carregar formul√°rio. Tente novamente.",
                "detalhes": str(e)
            }
        )


@router.post("/formulario", response_class=HTMLResponse)
async def formulario_submit(
    request: Request,
    # Campos da avalia√ß√£o f√≠sica
    peso: float = Form(...),
    altura: float = Form(...),
    observacoes: str = Form(""),

    db: Session = Depends(get_db)
):
    """Processa submiss√£o do formul√°rio de avalia√ß√£o"""
    try:
        debug_log(f"üìù FORMULARIO/SUBMIT: Recebendo dados - peso: {peso}kg, altura: {altura}cm")

        # Obter token de sess√£o
        session_token = request.cookies.get(SESSION_COOKIE_NAME)
        jwt_data = verify_simple_jwt(session_token) if session_token else None

        if not jwt_data or jwt_data.get("user_type") != "aluno":
            debug_log("‚ùå FORMULARIO/SUBMIT: Usu√°rio n√£o autenticado")
            return RedirectResponse(url="/login", status_code=303)

        aluno_id = jwt_data.get("user_id")

        # Buscar ou criar aluno
        aluno = db.query(Aluno).filter(Aluno.id == aluno_id).first()
        if not aluno:
            error_log(f"‚ùå FORMULARIO/SUBMIT: Aluno ID {aluno_id} n√£o encontrado")
            return RedirectResponse(url="/login", status_code=303)

        # Criar nova avalia√ß√£o
        nova_avaliacao = Avaliacao(
            aluno_id=aluno_id,
            nome=aluno.nome,  # Preencher com nome do aluno
            data=now_sao_paulo(),
            peso_kg=peso,
            altura_cm=altura,
            observacoes_medidas=observacoes or ""
        )

        # Calcular IMC
        if altura > 0:
            imc = peso / ((altura / 100) ** 2)
            nova_avaliacao.imc = round(imc, 2)

        db.add(nova_avaliacao)
        db.commit()
        db.refresh(nova_avaliacao)

        info_log(f"‚úÖ FORMULARIO/SUBMIT: Nova avalia√ß√£o criada para {aluno.nome} - IMC: {nova_avaliacao.imc}")

        # Redirecionar para hist√≥rico
        return RedirectResponse(url="/meu-historico?success=true", status_code=303)

    except ValueError as e:
        error_log(f"‚ùå FORMULARIO/SUBMIT: Erro de valida√ß√£o: {str(e)}")
        return templates.TemplateResponse(
            "formulario.html",
            {
                "request": request,
                "error": f"Dados inv√°lidos: {str(e)}",
                "is_admin": False
            }
        )
    except Exception as e:
        error_log(f"‚ùå FORMULARIO/SUBMIT: Erro: {str(e)}")
        return templates.TemplateResponse(
            "formulario.html",
            {
                "request": request,
                "error": f"Erro ao salvar avalia√ß√£o: {str(e)}",
                "is_admin": False
            }
        )


@router.get("/perfil", response_class=HTMLResponse)
@require_auth(['aluno'])
async def perfil_aluno(
    request: Request,
    db: Session = Depends(get_db),
    session_data=None,
    jwt_data=None
):
    """P√°gina de perfil do aluno"""
    try:
        # Obter ID do aluno logado
        aluno_id = None
        if jwt_data:
            aluno_id = jwt_data.get("user_id")
        elif session_data:
            aluno_id = session_data.get("user_id")

        if not aluno_id:
            return RedirectResponse(url="/login")

        # Buscar aluno
        aluno = db.query(Aluno).filter(Aluno.id == aluno_id).first()
        if not aluno:
            return RedirectResponse(url="/login")

        debug_log(f"üë§ PERFIL: Carregando perfil de {aluno.nome}")

        return templates.TemplateResponse(
            "perfil_aluno.html",
            {
                "request": request,
                "aluno": aluno,
                "is_admin": False
            }
        )

    except Exception as e:
        error_log(f"‚ùå PERFIL: Erro: {str(e)}")
        return templates.TemplateResponse(
            "erro.html",
            {
                "request": request,
                "titulo": "Erro no Perfil",
                "mensagem": "Erro ao carregar perfil. Tente novamente.",
                "detalhes": str(e)
            }
        )