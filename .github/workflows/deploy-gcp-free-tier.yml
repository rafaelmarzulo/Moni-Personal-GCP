name: Deploy to GCP Cloud Run (Free Tier)

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: monipersonal-api
  REGION: us-central1

jobs:
  # Job 1: Testes e Valida√ß√£o
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run linting
        run: |
          pip install black flake8
          black --check app/ main.py || true
          flake8 app/ main.py --max-line-length=100 || true

      - name: Run tests
        run: |
          pytest tests/ -v --cov=app --cov-report=term-missing || true

  # Job 2: Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 3: Build e Deploy
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Build and push Docker image
        run: |
          IMAGE_TAG=$(git rev-parse --short HEAD)
          IMAGE_NAME="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/monipersonal-images/${{ env.SERVICE_NAME }}:${IMAGE_TAG}"

          # Build usando Cloud Build (120 min/dia gr√°tis)
          gcloud builds submit \
            --tag="${IMAGE_NAME}" \
            --timeout=20m

          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image=${{ env.IMAGE_NAME }} \
            --platform=managed \
            --region=${{ env.REGION }} \
            --allow-unauthenticated \
            --memory=512Mi \
            --cpu=1 \
            --min-instances=0 \
            --max-instances=3 \
            --timeout=60s \
            --concurrency=80 \
            --port=8000 \
            --set-env-vars="ENV=production,REGION=${{ env.REGION }}" \
            --set-secrets="ADMIN_PASSWORD=ADMIN_PASSWORD:latest,DATABASE_URL=DATABASE_URL:latest,JWT_SECRET_KEY=JWT_SECRET_KEY:latest" \
            --quiet

      - name: Get Service URL
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --platform=managed \
            --region=${{ env.REGION }} \
            --format="value(status.url)")
          echo "SERVICE_URL=${SERVICE_URL}" >> $GITHUB_ENV
          echo "üåê Service URL: ${SERVICE_URL}"

      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."

          # Test health endpoint
          if curl -sf "${{ env.SERVICE_URL }}/health" > /dev/null; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ùå Health check failed"
            exit 1
          fi

          # Test ping endpoint
          if curl -sf "${{ env.SERVICE_URL }}/ping" > /dev/null; then
            echo "‚úÖ Ping check passed"
          else
            echo "‚ùå Ping check failed"
            exit 1
          fi

      - name: Create deployment summary
        run: |
          echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Service:** ${{ env.SERVICE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "**Region:** ${{ env.REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** ${{ env.SERVICE_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** ${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚úÖ Smoke Tests" >> $GITHUB_STEP_SUMMARY
          echo "- Health check: ‚úÖ Passed" >> $GITHUB_STEP_SUMMARY
          echo "- Ping check: ‚úÖ Passed" >> $GITHUB_STEP_SUMMARY

  # Job 4: Notifica√ß√£o
  notify:
    name: Send Notification
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
      - name: Send notification
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "‚úÖ Deploy conclu√≠do com sucesso!"
          else
            echo "‚ùå Deploy falhou!"
          fi
